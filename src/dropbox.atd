(* 								-*-tuareg-*- *)

type tagged = { tag <json name=".tag">: string }

type error_description = { ~error_summary: string;
                           error: tagged }

type token = { access_token: string;
               (* token_type: string; (* always "bearer" *) *)
             }

type name_details = { given_name: string;
                      surname: string;
                      familiar_name: string;
                      display_name: string;
                      abbreviated_name: string }

type sharing_policies = {
  shared_folder_member_policy: tagged;
  shared_folder_join_policy: tagged;
  shared_link_create_policy: tagged
}

type team = { name: string;
              sharing_policies: sharing_policies;
              office_addin_policy: tagged;
              id: string }

type uri = string wrap
           <ocaml t="Uri.t" wrap="Uri.of_string" unwrap="Uri.to_string">

type info = { account_id: string;
              name: name_details;
              email: string;
              ~email_verified <ocaml default="false">: bool;
              ~disabled <ocaml default="false">: bool;
              locale: string;
              referral_link: uri;
              ~is_paired <ocaml default="false">: bool;
              account_type: tagged;
              profile_photo_url: string nullable;
              ~country: string;
              team: team nullable;
              ~team_member_id: string}

type date = string wrap
            <ocaml t="Dropbox_date.t"
                   wrap="Dropbox_date.of_string"
                   unwrap="Dropbox_date.to_string" >

type metadata_root = [
  | Dropbox     <json name="dropbox">
  | App_folder  <json name="app_folder">
  ]


type json <ocaml module="Yojson.Safe"> = abstract (* "Raw" JSON. *)

type photo_info_variant = json wrap <ocaml module="Dropbox_json.Photo">
type video_info_variant = json wrap <ocaml module="Dropbox_json.Video">

type user = { uid: int;
              display_name: string;
              ~same_team: bool;
              ~member_id: string }

type user_info = { user: user;
                   access_type: string;
                   active: bool }

type group = { group_name: string;
               group_id: string;
               num_members: int }

type shared_folder = { shared_folder_id: string;
                       shared_folder_name: string;
                       path: string;
                       access_type: string;
                       shared_link_policy: string;
                       ?owner: user option;
                       ~membership: user_info list;
                       ~groups: group list }

type shared_folders = shared_folder list

type sharing_info = {
  read_only: bool;
  parent_shared_folder_id: string;
  modified_by: string
}

type metadata = { name: string;
                  id: string;
                  client_modified: date;
                  server_modified: date;
                  rev: string;
                  size: int;
                  ?path_lower: string option;
                  ?path_display: string option;
                  ?parent_shared_folder_id: string option;
                  ?sharing_info: sharing_info option;
                  ?has_explicit_shared_members: bool option;
                  content_hash: string }                 

type metadata_list = metadata list

type delta_json = { ~entries: (string * metadata nullable) list;
                    reset: bool;
                    cursor: string;
                    has_more: bool }

type latest_cursor = { cursor <ocaml name="latest_cursor">: string }

type longpoll_delta = { changes: bool;
                        ?backoff : int option; }

type copy_ref = { copy_ref: string;
                  expires: date }

type link = { url: string;
              expires: date }

type visibility = json wrap <ocaml module="Dropbox_json.Visibility">

type create_link_settings = {
  requested_visibility: string
}

type create_link_params = {
  path <ocaml name="create_path">: string;
  ?settings: create_link_settings option
}

type create_link_permissions = {
  can_revoke: bool;
  resolved_visibility: tagged;
  requested_visibility: tagged;
  ?revoke_failure_reason: tagged option
}

type create_link_result = {
  tag <json name=".tag">: string;
  url: string;
  name: string;
  link_permissions: create_link_permissions;
  id: string;
  ?expires: date option;
  ?path_lower: string option }

type shared_link = { url: string;
                     expires: date;
                     visibility: visibility }

type upload_session = { session_id : string }

type upload_session_cursor = {
  session_id: string;
  offset: int
}

type upload_session_append = {
  cursor <ocaml name="append_cursor">: upload_session_cursor;
  close: bool
}

type upload_session_commit = {
  path: string;
  mode: string;
  autorename: bool;
  mute: bool
}

type upload_session_finish = {
  cursor <ocaml name="finish_cursor">: upload_session_cursor;
  commit: upload_session_commit
}
